import { firstValueFrom, Observable } from 'rxjs';

import { JwtStorage } from '../../src/app/core/api/jwt-auth/jwt-storage';
import { JwtProvider } from '../../src/app/core/api/jwt-auth/jwt-provider';
import { LoginInfo, AuthApi, AuthResult } from '../../src/app/core/api/handlers/auth-api';
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';
import { environment } from '../../src/environments/environment';
import { UserIdStorage } from '../../src/app/core/api/userId-auth/userId-storage';
import { UserIdProvider } from '../../src/app/core/api/userId-auth/userId-provider';
import { getAxiosReqConfig } from './utils';

/**
 * Class that provides jwt storage and provider stubs.
 *
 * NOTE: All the stubs generated by the same instance of this stub provider
 * share the same place to store/retrieve the access token.
 */
export class JwtStubProvider {
    private jwt: string;

    constructor() {
        this.jwt = '';
    }

    public getJwtStorageStub(): JwtStorage {
        const setToken = (token: string) => {
            this.jwt = token;
        };
        // It's important to bind because this function will be called
        // with a different context than this instance
        setToken.bind(this);

        return {
            store: setToken,
        };
    }

    public getJwtProviderStub(): JwtProvider {
        const getToken = (): string => {
            return this.jwt;
        };
        getToken.bind(this);

        return {
            getToken: getToken,
        };
    }
}

/**
 * Class that provides userId storage and provider stubs.
 *
 * NOTE: All the stubs generated by the same instance of this stub provider
 * share the same place to store/retrieve the userId
 */
export class UserIdStubProvider {
    private userId: string;

    constructor() {
        this.userId = '';
    }

    public getUserIdProviderStub(): UserIdProvider {
        const getUserId = (): string => {
            return this.userId;
        };
        getUserId.bind(this);

        return {
            getUserId: getUserId,
        };
    }

    public getUserIdStorageStub(): UserIdStorage {
        const storeUserId = (userId: string): void => {
            this.userId = userId;
        };
        storeUserId.bind(this);

        return {
            store: storeUserId,
        };
    }
}

/**
 * This is some bcrypt digests for a known (clear) password.
 * This is useful to insert such values when creating a user
 * and to know how to authenticate with it.
 */
export const knownBcryptDigest = {
    pwdHash: '$2b$10$u4YAbPtjj2oCbZWKgFi1NuTqpvHlj2.A7ATGkEy8PM5eSCbZdK/Da',
    pwdSalt: '$2b$10$u4YAbPtjj2oCbZWKgFi1Nu',
    clearPassword: 'test',
};

/**
 * This is the password that should be used when authenticating
 * to the server api
 */
export const apiAuthPassword = knownBcryptDigest.clearPassword;

/**
 * Returns the credentials to authenticate as the user with the provided username
 * @param username username of the user to authenticate with
 */
export const getCredentialsForUser = (username: string): LoginInfo => {
    return {
        username: username,
        password: apiAuthPassword,
    };
};

export const authenticate = async (credentials: LoginInfo): Promise<JwtProvider> => {
    // Await the authentication response
    const reqUrl: string = `${environment.apiBaseUrl}/api/auth/signin`;
    const reqConfig: AxiosRequestConfig = getAxiosReqConfig();

    const authRes: AxiosResponse<AuthResult> = await axios.post<AuthResult>(
        reqUrl,
        credentials,
        reqConfig
    );
    const authData: AuthResult = authRes.data;

    // Create the storage and provider for the jwt
    const stubProvider: JwtStubProvider = new JwtStubProvider();
    const jwtStorageStub: JwtStorage = stubProvider.getJwtStorageStub();
    const jwtProviderStub: JwtProvider = stubProvider.getJwtProviderStub();

    // Set the token so that the provider can retrieve it
    jwtStorageStub.store(authData.token);

    // Return the provider, so it can be injected into the services
    // that require it
    return jwtProviderStub;
};
