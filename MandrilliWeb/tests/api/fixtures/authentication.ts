import { firstValueFrom, Observable } from 'rxjs';

import { JwtStorage } from '../../../src/app/core/api/jwt-auth/jwt-storage';
import { JwtProvider } from '../../../src/app/core/api/jwt-auth/jwt-provider';
import { LoginInfo, AuthApi, AuthResult } from '../../../src/app/core/api/handlers/auth-api';

/**
 * Class that provides jwt storage and provider stubs.
 *
 * NOTE: All the stubs generated by the same instance of this stub provider
 * share the same place to store/retrieve the access token.
 */
export class JwtStubProvider {
    public accessToken: string;

    constructor() {
        this.accessToken = '';
    }

    public getJwtStorageStub(): JwtStorage {
        const setToken = (token: string) => {
            this.accessToken = token;
        };
        setToken.bind(this);

        return {
            store: setToken,
        };
    }

    public getJwtProviderStub(): JwtProvider {
        const getToken = (): string => {
            return this.accessToken;
        };
        getToken.bind(this);

        return {
            getToken: getToken,
        };
    }
}

/**
 * This is some bcrypt digests for a known (clear) password.
 * This is useful to insert such values when creating a user
 * and to know how to authenticate with it.
 */
export const knownBcryptDigest = {
    pwdHash: '$2b$10$u4YAbPtjj2oCbZWKgFi1NuTqpvHlj2.A7ATGkEy8PM5eSCbZdK/Da',
    pwdSalt: '$2b$10$u4YAbPtjj2oCbZWKgFi1Nu',
    clearPassword: 'test',
};

/**
 * This is the password that should be used when authenticating
 * to the server api
 */
export const apiAuthPassword = knownBcryptDigest.clearPassword;

// TODO since tests should be isolated, this function should use axios
//  instead of a service that is being tested
export const authenticate = async (
    authApi: AuthApi,
    credentials: LoginInfo
): Promise<JwtProvider> => {
    // Await the authentication response
    const authObs: Observable<AuthResult> = await authApi.login(credentials);
    const authRes: AuthResult = await firstValueFrom(authObs);

    // Create the storage and provider for the jwt
    const stubProvider: JwtStubProvider = new JwtStubProvider();
    const jwtStorageStub: JwtStorage = stubProvider.getJwtStorageStub();
    const jwtProviderStub: JwtProvider = stubProvider.getJwtProviderStub();

    // Set the token so that the provider can retrieve it
    jwtStorageStub.store(authRes.token);

    // Return the provider, so it can be injected into the services
    // that require it
    return jwtProviderStub;
};
